/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package trains;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import utils.DatabaseConnection;
import static trains.MatchedTrains.source;

/**
 *
 * @author harish
 */
public class TrainBetweenStations extends javax.swing.JFrame {

    /**
     * Creates new form train_between_stations2
     */
    public TrainBetweenStations() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        comboTrainType = new javax.swing.JComboBox();
        comboArrivalTimeTo = new javax.swing.JComboBox();
        comboArrivalTimeFrom = new javax.swing.JComboBox();
        comboStartTimeFrom = new javax.swing.JComboBox();
        comboStartTimeTo = new javax.swing.JComboBox();
        txtMonth = new javax.swing.JTextField();
        comboYear = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        comboDestinationStation = new javax.swing.JComboBox();
        txtDate = new javax.swing.JTextField();
        comboClass = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboSourceStation = new javax.swing.JComboBox();
        btnGetDetails = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel9.setText("Type");

        comboTrainType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTrainTypeActionPerformed(evt);
            }
        });

        comboArrivalTimeTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any Time", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));

        comboArrivalTimeFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any Time", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));

        comboStartTimeFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any Time", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));

        comboStartTimeTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any Time", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));

        comboYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015" }));
        comboYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboYearActionPerformed(evt);
            }
        });

        jLabel2.setText("Destination");

        jLabel1.setText("Source");

        jLabel3.setText("Class");

        comboSourceStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSourceStationActionPerformed(evt);
            }
        });

        btnGetDetails.setText("Get Details");
        btnGetDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDetailsActionPerformed(evt);
            }
        });

        jLabel4.setText("Date");

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(243, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboDestinationStation, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(51, 51, 51)
                        .addComponent(comboSourceStation, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboClass, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(10, 10, 10)
                                        .addComponent(comboTrainType, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(comboArrivalTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(comboArrivalTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(comboStartTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(0, 0, Short.MAX_VALUE)
                                                    .addComponent(comboStartTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE))))))
                                .addGap(13, 13, 13)
                                .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(119, 119, 119))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(btnGetDetails))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(comboSourceStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDestinationStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboStartTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboStartTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboArrivalTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboArrivalTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9))
                    .addComponent(comboTrainType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(btnGetDetails)
                .addGap(52, 52, 52)
                .addComponent(jButton2)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboSourceStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSourceStationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSourceStationActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            String q1 = "select stationname from " + DatabaseConnection.TABLE_STATION_CODE_AND_NAME + " order by stationname ";
            System.out.println(q1);
            ResultSet tt = utils.DatabaseConnection.executeQuery(q1);
            ArrayList station_list = new ArrayList();
            while (tt.next()) {
                station_list.add(tt.getString("stationname"));
            }
            final DefaultComboBoxModel model1 = new DefaultComboBoxModel(station_list.toArray());
            comboSourceStation.setModel(model1);
            //stop 2
            final DefaultComboBoxModel model2 = new DefaultComboBoxModel(station_list.toArray());
            comboDestinationStation.setModel(model2);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        comboSourceStation.setSelectedIndex(0);
        comboSourceStation.setSelectedIndex(5);
        try {
            //train type

            String q = "select Classname from " + DatabaseConnection.TABLE_CLASS + " order by classname";
            System.out.println(q);
            ResultSet t = utils.DatabaseConnection.executeQuery(q);

            final DefaultComboBoxModel model1 = new DefaultComboBoxModel();
            comboClass.setModel(model1);
            model1.addElement("All Class");
            while (t.next()) {
                model1.addElement(t.getString("Classname"));
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        try {
            //train type
            String q = "select Typename from " + DatabaseConnection.TABLE_TRAIN_TYPE + " order by typename";
            System.out.println(q);
            ResultSet t = utils.DatabaseConnection.executeQuery(q);
            ArrayList type_list = new ArrayList();
            while (t.next()) {
                type_list.add(t.getString("typename"));
            }
            final DefaultComboBoxModel model = new DefaultComboBoxModel(type_list.toArray());
            comboTrainType.setModel(model);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        try {


            //train type
            String q = "select dayofmonth(curdate()) as day, month(curdate()) as month";
            System.out.println(q);
            ResultSet t = DatabaseConnection.executeQuery(q);

            while (t.next()) {
                txtDate.setText(t.getString("day"));
                txtMonth.setText(t.getString("month"));


            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown
    private boolean isValidatedData() {
        if (String.valueOf(comboSourceStation.getSelectedItem()).equalsIgnoreCase(String.valueOf(comboDestinationStation.getSelectedItem()))) {
            return false;
        }
        return true;
    }
    private void btnGetDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDetailsActionPerformed
        // TODO add your handling code here:
        String source = String.valueOf(comboSourceStation.getSelectedItem());
        String destination = String.valueOf(comboDestinationStation.getSelectedItem());
        String trainclass = String.valueOf(comboClass.getSelectedItem());
        String source_st = String.valueOf(comboStartTimeFrom.getSelectedItem());
        String source_et = String.valueOf(comboStartTimeTo.getSelectedItem());
        String desti_st = String.valueOf(comboArrivalTimeFrom.getSelectedItem());
        String desti_et = String.valueOf(comboArrivalTimeTo.getSelectedItem());
        String traintype = String.valueOf(comboTrainType.getSelectedItem());
        String date_year = String.valueOf(comboYear.getSelectedItem());
        String date_day = String.valueOf(txtDate.getText());
        String date_month = String.valueOf(txtMonth.getText());
        ArrayList<Integer> matchedTrains = new ArrayList<>();
        String dayname = "";
        if (!isValidatedData()) {

            JOptionPane.showMessageDialog(null, "source and destination must not be same");

        } else {
            //checked matched trains
            try {


                //train type
                String q = "select st.train_no as train_no "
                        + "from " + DatabaseConnection.TABLE_STATION_AND_TRAIN + " st,"
                        + " " + DatabaseConnection.TABLE_STATION_CODE_AND_NAME + " scn where st.station_code=scn.stationcode "
                        + "and scn.StationName='" + source + "' and st.train_no in("
                        + "select st.train_no from station_and_train st,station_code_and_name scn where st.station_code=scn.stationcode and  "
                        + "scn.StationName='" + destination + "')";
                System.out.println(q);
                ResultSet t = DatabaseConnection.executeQuery(q);


                while (t.next()) {
                    matchedTrains.add(t.getInt("train_no"));
                    System.out.println(t.getInt("train_no"));
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            //check class
            if (trainclass.equalsIgnoreCase("all class")) {
            } else {
                try {


                    //train type
                    for (int i = 0; i < matchedTrains.size(); i++) {
                        String q = "select classname from train_and_class where train_no=" + matchedTrains.get(i);
                        System.out.println(q);
                        ResultSet t = utils.DatabaseConnection.executeQuery(q);

                        boolean check = false;
                        while (t.next()) {
                            if (trainclass.equalsIgnoreCase(t.getString("classname"))) {
                                check = true;
                            }
                        }
                        if (check == true) {
                            System.out.println("class available for " + matchedTrains.get(i));
                        } else {
                            System.out.println("class not available for " + matchedTrains.get(i));
                            matchedTrains.remove(i);

                        }

                    }
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }
            //check day



            try {


                //get dayname from mysql
                String query = "select dayname('" + date_year + "-" + date_month + "-" + date_day + "') as day";
                ResultSet rrr = utils.DatabaseConnection.executeQuery(query);
                while (rrr.next()) {
                    dayname = rrr.getString("day");
                }

                for (int i = 0; i < matchedTrains.size(); i++) {
                    String q = "select dayname from train_and_days where train_no=" + matchedTrains.get(i);
                    System.out.println(q);
                    ResultSet t = utils.DatabaseConnection.executeQuery(q);

                    boolean check = false;
                    while (t.next()) {
                        String y = t.getString("dayname");
                        if (y.equalsIgnoreCase("all")) {
                            check = true;
                            break;
                        } else if (dayname.equalsIgnoreCase(t.getString("dayname"))) {
                            check = true;
                        }
                    }
                    if (check == true) {
                        System.out.println("day available for " + matchedTrains.get(i));
                    } else {
                        System.out.println("day not available for " + matchedTrains.get(i));
                        matchedTrains.remove(i);
                    }

                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            //check source and destination time
            try {


                //get source time from mysql
                if (source_st.equalsIgnoreCase("any time")
                        || source_et.equalsIgnoreCase("any time")
                        || desti_st.equalsIgnoreCase("any time")
                        || desti_et.equalsIgnoreCase("any time")) {
                } else {
                    for (int i = 0; i < matchedTrains.size(); i++) {
                        String q = "select source_time from train_info where train_no=" + matchedTrains.get(i) + ""
                                + " and source_time>='" + source_st + "' and source_time<='" + source_et + "'"
                                + " and desti_time>='" + desti_st + "' and desti_time<='" + desti_et + "'";

                        System.out.println(q);
                        ResultSet t = utils.DatabaseConnection.executeQuery(q);

                        boolean check = false;
                        while (t.next()) {
                            check = true;
                        }
                        if (check == true) {
                            System.out.println("source and desti time available for " + matchedTrains.get(i));
                        } else {
                            System.out.println("source and desti time not available for " + matchedTrains.get(i));
                            matchedTrains.remove(i);

                        }

                    }
                }

            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            //check type
            try {


                //train type
                for (int i = 0; i < matchedTrains.size(); i++) {
                    String q = "select type from train_info where train_no=" + matchedTrains.get(i);
                    System.out.println(q);
                    ResultSet t = utils.DatabaseConnection.executeQuery(q);

                    boolean check = false;
                    while (t.next()) {
                        if (traintype.equalsIgnoreCase(t.getString("type"))) {
                            check = true;
                        }
                    }
                    if (check == true) {
                        System.out.println("type available for " + matchedTrains.get(i));
                    } else {
                        System.out.println("type not available for " + matchedTrains.get(i));
                        matchedTrains.remove(i);
                    }

                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            if (!matchedTrains.isEmpty()) {
                MatchedTrains.abc(matchedTrains, source, destination, trainclass,
                        (date_day + "-" + date_month + "-" + date_year));
                new MatchedTrains().setVisible(true);
                this.setVisible(false);
            } else {
                new NoMatchedTrains().setVisible(true);
                this.setVisible(false);
            }
        }

    }//GEN-LAST:event_btnGetDetailsActionPerformed

    private void comboTrainTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTrainTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTrainTypeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new main.Welcome().setVisible(true);
        this.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void comboYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboYearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrainBetweenStations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrainBetweenStations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrainBetweenStations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrainBetweenStations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrainBetweenStations().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetDetails;
    private javax.swing.JComboBox comboArrivalTimeFrom;
    private javax.swing.JComboBox comboArrivalTimeTo;
    private javax.swing.JComboBox comboClass;
    private javax.swing.JComboBox comboDestinationStation;
    private javax.swing.JComboBox comboSourceStation;
    private javax.swing.JComboBox comboStartTimeFrom;
    private javax.swing.JComboBox comboStartTimeTo;
    private javax.swing.JComboBox comboTrainType;
    private javax.swing.JComboBox comboYear;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtMonth;
    // End of variables declaration//GEN-END:variables
}
